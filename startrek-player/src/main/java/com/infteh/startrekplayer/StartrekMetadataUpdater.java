// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from StartrekPlayer.djinni

package com.infteh.startrekplayer;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class StartrekMetadataUpdater {
    public abstract void deleteDelegate();

    public abstract void setDelegate(StartrekMetadataUpdaterDelegate delegate);

    public abstract String metaUrl();

    public abstract String metaIdUrl();

    public abstract void setMetaUrl(String metaUrl);

    public abstract void setMetaIdUrl(String metaIdUrl);

    public abstract String title();

    public abstract String subtitle();

    public abstract String coverUrl();

    public abstract int ddbId();

    public abstract int type();

    public abstract String metaJson();

    public abstract void resetMeta();

    public abstract void updateMetaJson(String metaJson, boolean isSilence);

    public abstract void update();

    public abstract void updateMeta();

    public abstract void updateMetaId();

    public static StartrekMetadataUpdater create()
    {
        return CppProxy.create();
    }

    private static final class CppProxy extends StartrekMetadataUpdater
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public void deleteDelegate()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_deleteDelegate(this.nativeRef);
        }
        private native void native_deleteDelegate(long _nativeRef);

        @Override
        public void setDelegate(StartrekMetadataUpdaterDelegate delegate)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setDelegate(this.nativeRef, delegate);
        }
        private native void native_setDelegate(long _nativeRef, StartrekMetadataUpdaterDelegate delegate);

        @Override
        public String metaUrl()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_metaUrl(this.nativeRef);
        }
        private native String native_metaUrl(long _nativeRef);

        @Override
        public String metaIdUrl()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_metaIdUrl(this.nativeRef);
        }
        private native String native_metaIdUrl(long _nativeRef);

        @Override
        public void setMetaUrl(String metaUrl)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setMetaUrl(this.nativeRef, metaUrl);
        }
        private native void native_setMetaUrl(long _nativeRef, String metaUrl);

        @Override
        public void setMetaIdUrl(String metaIdUrl)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setMetaIdUrl(this.nativeRef, metaIdUrl);
        }
        private native void native_setMetaIdUrl(long _nativeRef, String metaIdUrl);

        @Override
        public String title()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_title(this.nativeRef);
        }
        private native String native_title(long _nativeRef);

        @Override
        public String subtitle()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_subtitle(this.nativeRef);
        }
        private native String native_subtitle(long _nativeRef);

        @Override
        public String coverUrl()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_coverUrl(this.nativeRef);
        }
        private native String native_coverUrl(long _nativeRef);

        @Override
        public int ddbId()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_ddbId(this.nativeRef);
        }
        private native int native_ddbId(long _nativeRef);

        @Override
        public int type()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_type(this.nativeRef);
        }
        private native int native_type(long _nativeRef);

        @Override
        public String metaJson()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_metaJson(this.nativeRef);
        }
        private native String native_metaJson(long _nativeRef);

        @Override
        public void resetMeta()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_resetMeta(this.nativeRef);
        }
        private native void native_resetMeta(long _nativeRef);

        @Override
        public void updateMetaJson(String metaJson, boolean isSilence)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_updateMetaJson(this.nativeRef, metaJson, isSilence);
        }
        private native void native_updateMetaJson(long _nativeRef, String metaJson, boolean isSilence);

        @Override
        public void update()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_update(this.nativeRef);
        }
        private native void native_update(long _nativeRef);

        @Override
        public void updateMeta()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_updateMeta(this.nativeRef);
        }
        private native void native_updateMeta(long _nativeRef);

        @Override
        public void updateMetaId()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_updateMetaId(this.nativeRef);
        }
        private native void native_updateMetaId(long _nativeRef);

        public static native StartrekMetadataUpdater create();
    }
}
