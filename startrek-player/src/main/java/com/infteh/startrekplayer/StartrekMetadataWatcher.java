// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from StartrekPlayer.djinni

package com.infteh.startrekplayer;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class StartrekMetadataWatcher {
    public abstract void deleteDelegate();

    public abstract void setDelegate(StartrekMetadataWatcherDelegate delegate);

    public abstract String url();

    public abstract void setUrl(String url);

    public abstract boolean isConnected();

    public abstract void subscribeOne(String stationId, StartrekMetadataSubscriptionType subscriptionType);

    public abstract void unsubscribeOne(String stationId);

    public abstract void fetchOne(String stationId, StartrekMetadataFetchType fetchType);

    public abstract void subscribe(HashMap<String, StartrekMetadataSubscriptionType> subscribeStations);

    public abstract void unsubscribe(ArrayList<String> unsubscribeStations);

    public abstract void fetch(HashMap<String, StartrekMetadataFetchType> fetchStations);

    public abstract void watch(HashMap<String, StartrekMetadataSubscriptionType> subscribeStations, ArrayList<String> unsubscribeStations, HashMap<String, StartrekMetadataFetchType> fetchStations);

    public static StartrekMetadataWatcher create()
    {
        return CppProxy.create();
    }

    private static final class CppProxy extends StartrekMetadataWatcher
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public void deleteDelegate()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_deleteDelegate(this.nativeRef);
        }
        private native void native_deleteDelegate(long _nativeRef);

        @Override
        public void setDelegate(StartrekMetadataWatcherDelegate delegate)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setDelegate(this.nativeRef, delegate);
        }
        private native void native_setDelegate(long _nativeRef, StartrekMetadataWatcherDelegate delegate);

        @Override
        public String url()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_url(this.nativeRef);
        }
        private native String native_url(long _nativeRef);

        @Override
        public void setUrl(String url)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setUrl(this.nativeRef, url);
        }
        private native void native_setUrl(long _nativeRef, String url);

        @Override
        public boolean isConnected()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isConnected(this.nativeRef);
        }
        private native boolean native_isConnected(long _nativeRef);

        @Override
        public void subscribeOne(String stationId, StartrekMetadataSubscriptionType subscriptionType)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_subscribeOne(this.nativeRef, stationId, subscriptionType);
        }
        private native void native_subscribeOne(long _nativeRef, String stationId, StartrekMetadataSubscriptionType subscriptionType);

        @Override
        public void unsubscribeOne(String stationId)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_unsubscribeOne(this.nativeRef, stationId);
        }
        private native void native_unsubscribeOne(long _nativeRef, String stationId);

        @Override
        public void fetchOne(String stationId, StartrekMetadataFetchType fetchType)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_fetchOne(this.nativeRef, stationId, fetchType);
        }
        private native void native_fetchOne(long _nativeRef, String stationId, StartrekMetadataFetchType fetchType);

        @Override
        public void subscribe(HashMap<String, StartrekMetadataSubscriptionType> subscribeStations)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_subscribe(this.nativeRef, subscribeStations);
        }
        private native void native_subscribe(long _nativeRef, HashMap<String, StartrekMetadataSubscriptionType> subscribeStations);

        @Override
        public void unsubscribe(ArrayList<String> unsubscribeStations)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_unsubscribe(this.nativeRef, unsubscribeStations);
        }
        private native void native_unsubscribe(long _nativeRef, ArrayList<String> unsubscribeStations);

        @Override
        public void fetch(HashMap<String, StartrekMetadataFetchType> fetchStations)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_fetch(this.nativeRef, fetchStations);
        }
        private native void native_fetch(long _nativeRef, HashMap<String, StartrekMetadataFetchType> fetchStations);

        @Override
        public void watch(HashMap<String, StartrekMetadataSubscriptionType> subscribeStations, ArrayList<String> unsubscribeStations, HashMap<String, StartrekMetadataFetchType> fetchStations)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_watch(this.nativeRef, subscribeStations, unsubscribeStations, fetchStations);
        }
        private native void native_watch(long _nativeRef, HashMap<String, StartrekMetadataSubscriptionType> subscribeStations, ArrayList<String> unsubscribeStations, HashMap<String, StartrekMetadataFetchType> fetchStations);

        public static native StartrekMetadataWatcher create();
    }
}
